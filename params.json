{"name":"Sol.js","tagline":"Node.js framework built around Express.js","body":"An experiment in creating a simple and lean node.js framework that forces strong coding standards and unit testing techniques.\r\n\r\n\r\n## Setup\r\n\r\n1. Download [https://github.com/isuttell/sol/archive/v0.1-alpha.tar.gz](https://github.com/isuttell/sol/archive/v0.1-alpha.tar.gz)\r\n2. Untar `tar -zxf v0.1-alpha.tar.gz && cd sol-0.1-alpha`\r\n3. Install `npm install`\r\n4. `node app.js` // Or alternative process manager, e.g.\r\n5. Open [http://localhost:3001]([http://localhost:3001]) in a web browser.\r\n\r\n## Assets\r\nRunning `grunt` will automatically watch the assets folder and update it for\r\ndevelopment. Assets are located in the `assets` folder. Grunt automatically processes any changes in this folder into the `.tmp` directory. During this process things like Compass/SCSS are run. Everything in this folder should not be compressed or minified. By default, the app uses `.tmp/public` as a static folder.\r\n\r\nFor production, run `grunt build` this copies and compiles the assets into the `www` folder. This is the folder that should be used as the static asset folder on a production server.\r\n\r\n\r\n## Routes\r\n\r\nRoutes are defined in `config/routes.js`:\r\n\r\n````\r\n// Format\r\n'VERB /uri' : '*Controller.action',\r\n\r\n// Examples\r\n'GET /' : 'IndexController.index',\r\n'GET /users' : 'UserController.index',\r\n'POST /user' : 'UserController.post',\r\n````\r\n\r\n\r\n## Model\r\n\r\nSol.js use [Waterline](https://github.com/balderdashy/waterline) as an ORM.\r\nModel definitions are automaticall loaded from the `api/models/` folder. Only\r\nfiles ending in `Model.js` are read, e.g. `UserModel.js`.\r\n\r\n````\r\nmodule.exports = {\r\n\r\n  identity: 'User', // This name is used in Controllers to access it\r\n\r\n  connection: 'localDisk', // Adapter defined in config/connections\r\n\r\n  attributes: {\r\n    firstName: 'string',\r\n    lastName: 'string'\r\n  }\r\n\r\n};\r\n````\r\n\r\n\r\n## Controllers\r\n\r\nControllers are automatically loaded from the `api/controllers/` folder. Only\r\nfiles ending in `Controller.js` are read, e.g. `HomeController.js`.\r\n\r\n````\r\nmodule.exports = function(sol){\r\n  return {\r\n    // This action is passed directly to express. req and res allow access\r\n    // to Express.js request and response objects\r\n    index: function(req, res) {\r\n      sol.user.find().exec(function(err, model){\r\n        if(err) {\r\n          res.status(500).send('Unable to create model');\r\n        }\r\n        return res.json(model);\r\n      });\r\n    },\r\n    projects: function(req, res) {\r\n      return res.render('projects');\r\n    }\r\n  };\r\n}\r\n````\r\n\r\n## Views\r\n\r\nViews are located in the views folder and use ejs by default; To render a view,\r\nuse the `res.render(view, data)` function in a controller action.\r\n\r\n\r\n## Coding Standards and Unit Testing\r\nAll JS follows [Google Coding Standards](https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml). This can be changed in `.jscsrc`. Every time\r\ngrunt detects a change in code, it automatically checks for linting issues,\r\ncoding standards, and unit tests. Prior to every commit, all three must pass.\r\n\r\n## Grunt Configuration\r\nGrunt configuration files are split into two directorys and automatically loaded.\r\nEach task gets its own file in the `tasks/config` directory. Additional custum\r\ntasks are registered in the `tasks/regsiter` folder.\r\n\r\n\r\n### Sessions\r\nBe default cookies are used. To enable Redis, uncomment out the adapter line in\r\n`config/sessions.js`\r\n\r\n````\r\n  // adapter: 'redis', // Uncomment this to enable\r\n\r\n  redis: {\r\n    host: 'localhost',\r\n    port: 6379,\r\n    ttl: 24 * 60 * 60,\r\n    db: 0,\r\n    pass: 'secret',\r\n    prefix: 'sess:'\r\n  }\r\n````\r\n\r\n### Bower\r\nBower components are automatically installed in the `assets/components` folder\r\nand intergrated into the asset pipeline\r\n\r\n### Todo\r\n\r\n* Create better example\r\n* Setup CORs for APIs\r\n* Create better environment switching\r\n* Implement better logging system\r\n* Implement CSRF","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}